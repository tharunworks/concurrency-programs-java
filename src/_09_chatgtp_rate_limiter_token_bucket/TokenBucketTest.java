package _09_chatgtp_rate_limiter_token_bucket;

/*
this code is generated by chatgpt
 */
class TokenBucket {
    private int bucketSize;
    private int tokenRate;
    private int tokens;
    private long lastUpdate;

    public TokenBucket(int bucketSize, int tokenRate) {
        this.bucketSize = bucketSize;
        this.tokenRate = tokenRate;
        this.tokens = bucketSize;
        this.lastUpdate = System.currentTimeMillis();
    }

    public synchronized boolean getToken() {
        long currentTime = System.currentTimeMillis();
        long timeDiff = currentTime - lastUpdate;
        int tokensToAdd = (int) (timeDiff * tokenRate / 1000);
        if (tokensToAdd > 0) {
            tokens = Math.min(tokens + tokensToAdd, bucketSize);
            lastUpdate = currentTime;
        }
        if (tokens > 0) {
            tokens--;
            return true;
        } else {
            return false;
        }
    }
}
public class TokenBucketTest {
    public static void main(String[] args) {
        TokenBucket tokenBucket = new TokenBucket(1, 1);
        for (int i = 0; i < 100; i++) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    while (true) {
                        if (tokenBucket.getToken()) {
                            System.out.println("Got token");
                        } else {
                            System.out.println("No token");
                        }
                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }).start();
        }
    }
}